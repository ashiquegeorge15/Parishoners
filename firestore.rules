rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions remain the same
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/Admin/$(request.auth.uid));
    }

    // Users collection - modified to allow email checks and registration
    match /users/{userId} {
      // Allow reading email for duplicate checks during registration
      allow read: if true;  // This allows checking for existing emails
      
      // Allow creation for new users
      allow create: if 
        request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.email is string &&
        request.resource.data.status == 'pending' &&
        request.resource.data.role == 'member';
      
      // Users can update their own data
      allow update: if isOwner(userId);
      
      // Admins maintain full access
      allow write, delete: if isAdmin();
    }
    
    // Access requests collection - simplified for registration
    match /accessRequests/{userId} {
      // Allow creation during registration
      allow create: if 
        request.auth != null &&
        request.auth.uid == userId;
      
      // Allow users to read their own requests
      allow read: if isOwner(userId);
      
      // Admins maintain full access
      allow read, write, delete: if isAdmin();
    }

    // Keep other existing rules unchanged
    match /Admin/{adminId} {
      allow read: if isAdmin();
      allow create, update, delete: if isAdmin();
      allow read, write, update: if isOwner(adminId);
    }

    match /members/{memberId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   request.resource.data.createdBy == request.auth.uid &&
                   request.resource.data.keys().hasAll(['name', 'createdBy', 'createdAt']);
      allow update, delete: if isAuthenticated() && 
                           (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    match /events/{eventId} {
      allow read: if true;
      allow write, create, update, delete: if isAdmin();
    }
    
    // Notification Templates collection rules
    match /notificationTemplates/{templateId} {
      allow read, write, create, update, delete: if isAdmin();
    }
    
    // Reminder History collection rules
    match /reminderHistory/{historyId} {
      allow read, write, create, update, delete: if isAdmin();
    }

    // Dues collection rules
    match /dues/{dueId} {
      // Allow users to read their own dues
      allow read: if isAuthenticated() && 
                 request.auth.uid == resource.data.userId;
      
      // Allow admins full access to dues
      allow read, write, create, update, delete: if isAdmin();
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Allow users to create messages
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      
      // Allow users to read their own messages
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      
      // Allow admins full access to messages
      allow read, write, create, update, delete: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}